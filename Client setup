!pip install flwr

import jax
from jax import grad

from flwr.client import NumPyClient
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
class CarClient(NumPyClient):
    def __init__(self, car, dataloader):
        super().__init__()
        self.car = car
        self.dataloader = dataloader
        self.model = SimpleCNN().to(device)

    def get_parameters(self, config):
        """Return the model parameters."""
        return [param.detach().numpy() for param in self.model.parameters()]

    def set_parameters(self, parameters):
        """Set model parameters."""
        state_dict = OrderedDict({k: torch.from_numpy(v) for k, v in zip(self.model.state_dict().keys(), parameters)})
        self.model.load_state_dict(state_dict, strict=True)

    def fit(self, parameters, config):
        """Train the model using the car's local data."""
        self.set_parameters(parameters)
        # Training loop (using JAX for loss and gradients)
        def loss_fn(params):
            logits = self.model.forward(self.data["inputs"], params)
            return cross_entropy_loss(logits, self.data["labels"])

        grad_fn = grad(loss_fn)
        grads = grad_fn(self.model.get_parameters())
        train_client(self.model, self.dataloader, epochs=5, lr=0.01)
        return self.get_parameters(), len(self.dataloader), {}

    def evaluate(self, parameters, config):
        """Evaluate the global model using the car's local data."""
        self.set_parameters(parameters)
        accuracy = test_model(self.model, self.dataloader)
        return float(accuracy), len(self.dataloader), {"accuracy": accuracy}
